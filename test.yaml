components:
    schemas:
        album:
            properties:
                album_id:
                    type: integer
                artist_id:
                    type: integer
                last_updated:
                    format: date
                    type: string
                title:
                    maxLength: 160
                    type: string
            required:
            - album_id
            - title
            - artist_id
            type: object
        artist:
            properties:
                artist_id:
                    type: integer
                name:
                    maxLength: 120
                    type: string
            required:
            - artist_id
            type: object
        customer:
            properties:
                address:
                    maxLength: 70
                    type: string
                city:
                    maxLength: 40
                    type: string
                company:
                    maxLength: 80
                    type: string
                country:
                    maxLength: 40
                    type: string
                customer_id:
                    type: integer
                email:
                    maxLength: 60
                    type: string
                fax:
                    maxLength: 24
                    type: string
                first_name:
                    maxLength: 40
                    type: string
                last_name:
                    maxLength: 20
                    type: string
                phone:
                    maxLength: 24
                    type: string
                postal_code:
                    maxLength: 10
                    type: string
                state:
                    maxLength: 40
                    type: string
                support_rep_id:
                    type: integer
                version_stamp:
                    type: string
            required:
            - customer_id
            - first_name
            - last_name
            - email
            type: object
        employee:
            properties:
                address:
                    maxLength: 70
                    type: string
                birth_date:
                    format: date-time
                    type: string
                city:
                    maxLength: 40
                    type: string
                country:
                    maxLength: 40
                    type: string
                email:
                    maxLength: 60
                    type: string
                employee_id:
                    type: integer
                fax:
                    maxLength: 24
                    type: string
                first_name:
                    maxLength: 20
                    type: string
                hire_date:
                    format: date-time
                    type: string
                last_name:
                    maxLength: 20
                    type: string
                phone:
                    maxLength: 24
                    type: string
                postal_code:
                    maxLength: 10
                    type: string
                reports_to:
                    type: integer
                state:
                    maxLength: 40
                    type: string
                title:
                    maxLength: 30
                    type: string
            required:
            - employee_id
            - last_name
            - first_name
            type: object
        genre:
            properties:
                genre_id:
                    type: integer
                name:
                    maxLength: 120
                    type: string
            required:
            - genre_id
            type: object
        invoice:
            properties:
                billing_address:
                    maxLength: 70
                    type: string
                billing_city:
                    maxLength: 40
                    type: string
                billing_country:
                    maxLength: 40
                    type: string
                billing_postal_code:
                    maxLength: 10
                    type: string
                billing_state:
                    maxLength: 40
                    type: string
                customer:
                    $ref: '#/components/schemas/customer'
                customer_id:
                    type: integer
                invoice_date:
                    format: date-time
                    type: string
                invoice_id:
                    type: integer
                last_updated:
                    format: date-time
                    type: string
                line_items:
                    items:
                        $ref: '#/components/schemas/invoice_line'
                    type: array
                total:
                    format: float
                    type: number
            required:
            - invoice_id
            - customer_id
            - invoice_date
            - total
            type: object
        invoice_line:
            properties:
                invoice_id:
                    type: integer
                invoice_line_id:
                    type: integer
                quantity:
                    type: integer
                track_id:
                    type: integer
                unit_price:
                    format: float
                    type: number
            required:
            - invoice_line_id
            - invoice_id
            - track_id
            - unit_price
            - quantity
            type: object
        media_type:
            properties:
                media_type_id:
                    type: integer
                name:
                    maxLength: 120
                    type: string
            required:
            - media_type_id
            type: object
        playlist:
            properties:
                name:
                    maxLength: 120
                    type: string
                playlist_id:
                    type: integer
            required:
            - playlist_id
            type: object
        playlist_track:
            properties:
                playlist_id:
                    type: integer
                track_id:
                    type: integer
            required:
            - playlist_id
            - track_id
            type: object
        track:
            properties:
                album_id:
                    type: integer
                bytes:
                    type: integer
                composer:
                    maxLength: 220
                    type: string
                genre_id:
                    type: integer
                media_type_id:
                    type: integer
                milliseconds:
                    type: integer
                name:
                    maxLength: 200
                    type: string
                track_id:
                    type: integer
                unit_price:
                    format: float
                    type: number
            required:
            - track_id
            - name
            - media_type_id
            - milliseconds
            - unit_price
            type: object
    securitySchemes:
        auth0:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
                authorizerResultTtlInSeconds: 60
                authorizerUri: authentication invoke
                identitySource: method.request.header.Authorization
                identityValidationExpression: ^Bearer [-0-9a-zA-Z._]*$
                type: token
            x-amazon-apigateway-authtype: custom
info:
    title: Chinook RestAPI
    version: 1.0.0
openapi: 3.1.0
paths:
    /album:
        get:
            parameters:
            -   description: Filter by album_id
                in: query
                name: album_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by title
                in: query
                name: title
                required: false
                schema:
                    pattern: '"^(({0,160})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,160}),|not-between::({0,160}),|in::(({0,160}),)*)$"'
                    type: string
            -   description: Filter by artist_id
                in: query
                name: artist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by last_updated
                in: query
                name: last_updated
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}),|not-between::(\d{4}-\d{2}-\d{2}),|in::((\d{4}-\d{2}-\d{2}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/album'
                                type: array
                    description: A list of album.
            summary: Retrieve all album
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                album_id:
                                    type: integer
                                artist_id:
                                    type: integer
                                last_updated:
                                    format: date
                                    type: string
                                title:
                                    maxLength: 160
                                    type: string
                            required:
                            - album_id
                            - title
                            - artist_id
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/album'
                                type: array
                    description: album created successfully
            summary: Create a new album
        put:
            parameters:
            -   description: Filter by album_id
                in: query
                name: album_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by title
                in: query
                name: title
                required: false
                schema:
                    pattern: '"^(({0,160})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,160}),|not-between::({0,160}),|in::(({0,160}),)*)$"'
                    type: string
            -   description: Filter by artist_id
                in: query
                name: artist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by last_updated
                in: query
                name: last_updated
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}),|not-between::(\d{4}-\d{2}-\d{2}),|in::((\d{4}-\d{2}-\d{2}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                album_id:
                                    type: integer
                                artist_id:
                                    type: integer
                                last_updated:
                                    format: date
                                    type: string
                                title:
                                    maxLength: 160
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/album'
                                type: array
                    description: album updated successfully
            summary: Update an existing album by ID
    /album/{album_id}:
        put:
            parameters:
            -   description: ID of the album to update
                in: path
                name: album_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                album_id:
                                    type: integer
                                artist_id:
                                    type: integer
                                last_updated:
                                    format: date
                                    type: string
                                title:
                                    maxLength: 160
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/album'
                                type: array
                    description: album updated successfully
            summary: Update an existing album by album_id
    /album/{id}:
        delete:
            parameters:
            -   description: Filter by album_id
                in: query
                name: album_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by title
                in: query
                name: title
                required: false
                schema:
                    pattern: '"^(({0,160})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,160}),|not-between::({0,160}),|in::(({0,160}),)*)$"'
                    type: string
            -   description: Filter by artist_id
                in: query
                name: artist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by last_updated
                in: query
                name: last_updated
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}),|not-between::(\d{4}-\d{2}-\d{2}),|in::((\d{4}-\d{2}-\d{2}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/album'
                                type: array
                    description: album deleted successfully
            summary: Delete an existing album by ID
        get:
            parameters:
            -   description: ID of the album to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/album'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve album by album_id
    /artist:
        get:
            parameters:
            -   description: Filter by artist_id
                in: query
                name: artist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/artist'
                                type: array
                    description: A list of artist.
            summary: Retrieve all artist
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                artist_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required:
                            - artist_id
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/artist'
                                type: array
                    description: artist created successfully
            summary: Create a new artist
        put:
            parameters:
            -   description: Filter by artist_id
                in: query
                name: artist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                artist_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/artist'
                                type: array
                    description: artist updated successfully
            summary: Update an existing artist by ID
    /artist/{artist_id}:
        put:
            parameters:
            -   description: ID of the artist to update
                in: path
                name: artist_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                artist_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/artist'
                                type: array
                    description: artist updated successfully
            summary: Update an existing artist by artist_id
    /artist/{id}:
        delete:
            parameters:
            -   description: Filter by artist_id
                in: query
                name: artist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/artist'
                                type: array
                    description: artist deleted successfully
            summary: Delete an existing artist by ID
        get:
            parameters:
            -   description: ID of the artist to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/artist'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve artist by artist_id
    /customer:
        get:
            parameters:
            -   description: Filter by customer_id
                in: query
                name: customer_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by first_name
                in: query
                name: first_name
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by last_name
                in: query
                name: last_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by company
                in: query
                name: company
                required: false
                schema:
                    pattern: '"^(({0,80})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,80}),|not-between::({0,80}),|in::(({0,80}),)*)$"'
                    type: string
            -   description: Filter by address
                in: query
                name: address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by city
                in: query
                name: city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by state
                in: query
                name: state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by country
                in: query
                name: country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by postal_code
                in: query
                name: postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by phone
                in: query
                name: phone
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by fax
                in: query
                name: fax
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by email
                in: query
                name: email
                required: false
                schema:
                    pattern: '"^(({0,60})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,60}),|not-between::({0,60}),|in::(({0,60}),)*)$"'
                    type: string
            -   description: Filter by support_rep_id
                in: query
                name: support_rep_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by version_stamp
                in: query
                name: version_stamp
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customer'
                                type: array
                    description: A list of customer.
            summary: Retrieve all customer
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                company:
                                    maxLength: 80
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                customer_id:
                                    type: integer
                                email:
                                    maxLength: 60
                                    type: string
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 40
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                state:
                                    maxLength: 40
                                    type: string
                                support_rep_id:
                                    type: integer
                                version_stamp:
                                    type: string
                            required:
                            - customer_id
                            - first_name
                            - last_name
                            - email
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customer'
                                type: array
                    description: customer created successfully
            summary: Create a new customer
        put:
            parameters:
            -   description: Filter by customer_id
                in: query
                name: customer_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by first_name
                in: query
                name: first_name
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by last_name
                in: query
                name: last_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by company
                in: query
                name: company
                required: false
                schema:
                    pattern: '"^(({0,80})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,80}),|not-between::({0,80}),|in::(({0,80}),)*)$"'
                    type: string
            -   description: Filter by address
                in: query
                name: address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by city
                in: query
                name: city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by state
                in: query
                name: state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by country
                in: query
                name: country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by postal_code
                in: query
                name: postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by phone
                in: query
                name: phone
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by fax
                in: query
                name: fax
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by email
                in: query
                name: email
                required: false
                schema:
                    pattern: '"^(({0,60})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,60}),|not-between::({0,60}),|in::(({0,60}),)*)$"'
                    type: string
            -   description: Filter by support_rep_id
                in: query
                name: support_rep_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by version_stamp
                in: query
                name: version_stamp
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                company:
                                    maxLength: 80
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                customer_id:
                                    type: integer
                                email:
                                    maxLength: 60
                                    type: string
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 40
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                state:
                                    maxLength: 40
                                    type: string
                                support_rep_id:
                                    type: integer
                                version_stamp:
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customer'
                                type: array
                    description: customer updated successfully
            summary: Update an existing customer by ID
    /customer/{customer_id}:
        put:
            parameters:
            -   description: ID of the customer to update
                in: path
                name: customer_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                company:
                                    maxLength: 80
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                customer_id:
                                    type: integer
                                email:
                                    maxLength: 60
                                    type: string
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 40
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                state:
                                    maxLength: 40
                                    type: string
                                support_rep_id:
                                    type: integer
                                version_stamp:
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customer'
                                type: array
                    description: customer updated successfully
            summary: Update an existing customer by customer_id
    /customer/{customer_id}/version_stamp/{version_stamp}:
        put:
            parameters:
            -   description: ID of the customer to update
                in: path
                name: customer_id
                required: true
                schema:
                    type: integer
            -   description: version_stamp of the customer to update
                in: path
                name: version_stamp
                required: true
                schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                company:
                                    maxLength: 80
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                customer_id:
                                    type: integer
                                email:
                                    maxLength: 60
                                    type: string
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 40
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                state:
                                    maxLength: 40
                                    type: string
                                support_rep_id:
                                    type: integer
                                version_stamp:
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customer'
                                type: array
                    description: customer updated successfully
            summary: Update an existing customer by ID
    /customer/{id}:
        delete:
            parameters:
            -   description: Filter by customer_id
                in: query
                name: customer_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by first_name
                in: query
                name: first_name
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by last_name
                in: query
                name: last_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by company
                in: query
                name: company
                required: false
                schema:
                    pattern: '"^(({0,80})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,80}),|not-between::({0,80}),|in::(({0,80}),)*)$"'
                    type: string
            -   description: Filter by address
                in: query
                name: address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by city
                in: query
                name: city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by state
                in: query
                name: state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by country
                in: query
                name: country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by postal_code
                in: query
                name: postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by phone
                in: query
                name: phone
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by fax
                in: query
                name: fax
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by email
                in: query
                name: email
                required: false
                schema:
                    pattern: '"^(({0,60})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,60}),|not-between::({0,60}),|in::(({0,60}),)*)$"'
                    type: string
            -   description: Filter by support_rep_id
                in: query
                name: support_rep_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by version_stamp
                in: query
                name: version_stamp
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/customer'
                                type: array
                    description: customer deleted successfully
            summary: Delete an existing customer by ID
    /employee:
        get:
            parameters:
            -   description: Filter by employee_id
                in: query
                name: employee_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by last_name
                in: query
                name: last_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by first_name
                in: query
                name: first_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by title
                in: query
                name: title
                required: false
                schema:
                    pattern: '"^(({0,30})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,30}),|not-between::({0,30}),|in::(({0,30}),)*)$"'
                    type: string
            -   description: Filter by reports_to
                in: query
                name: reports_to
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by birth_date
                in: query
                name: birth_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by hire_date
                in: query
                name: hire_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by address
                in: query
                name: address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by city
                in: query
                name: city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by state
                in: query
                name: state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by country
                in: query
                name: country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by postal_code
                in: query
                name: postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by phone
                in: query
                name: phone
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by fax
                in: query
                name: fax
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by email
                in: query
                name: email
                required: false
                schema:
                    pattern: '"^(({0,60})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,60}),|not-between::({0,60}),|in::(({0,60}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/employee'
                                type: array
                    description: A list of employee.
            summary: Retrieve all employee
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                birth_date:
                                    format: date-time
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                email:
                                    maxLength: 60
                                    type: string
                                employee_id:
                                    type: integer
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 20
                                    type: string
                                hire_date:
                                    format: date-time
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                reports_to:
                                    type: integer
                                state:
                                    maxLength: 40
                                    type: string
                                title:
                                    maxLength: 30
                                    type: string
                            required:
                            - employee_id
                            - last_name
                            - first_name
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/employee'
                                type: array
                    description: employee created successfully
            summary: Create a new employee
        put:
            parameters:
            -   description: Filter by employee_id
                in: query
                name: employee_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by last_name
                in: query
                name: last_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by first_name
                in: query
                name: first_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by title
                in: query
                name: title
                required: false
                schema:
                    pattern: '"^(({0,30})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,30}),|not-between::({0,30}),|in::(({0,30}),)*)$"'
                    type: string
            -   description: Filter by reports_to
                in: query
                name: reports_to
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by birth_date
                in: query
                name: birth_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by hire_date
                in: query
                name: hire_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by address
                in: query
                name: address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by city
                in: query
                name: city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by state
                in: query
                name: state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by country
                in: query
                name: country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by postal_code
                in: query
                name: postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by phone
                in: query
                name: phone
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by fax
                in: query
                name: fax
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by email
                in: query
                name: email
                required: false
                schema:
                    pattern: '"^(({0,60})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,60}),|not-between::({0,60}),|in::(({0,60}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                birth_date:
                                    format: date-time
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                email:
                                    maxLength: 60
                                    type: string
                                employee_id:
                                    type: integer
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 20
                                    type: string
                                hire_date:
                                    format: date-time
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                reports_to:
                                    type: integer
                                state:
                                    maxLength: 40
                                    type: string
                                title:
                                    maxLength: 30
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/employee'
                                type: array
                    description: employee updated successfully
            summary: Update an existing employee by ID
    /employee/{employee_id}:
        put:
            parameters:
            -   description: ID of the employee to update
                in: path
                name: employee_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                address:
                                    maxLength: 70
                                    type: string
                                birth_date:
                                    format: date-time
                                    type: string
                                city:
                                    maxLength: 40
                                    type: string
                                country:
                                    maxLength: 40
                                    type: string
                                email:
                                    maxLength: 60
                                    type: string
                                employee_id:
                                    type: integer
                                fax:
                                    maxLength: 24
                                    type: string
                                first_name:
                                    maxLength: 20
                                    type: string
                                hire_date:
                                    format: date-time
                                    type: string
                                last_name:
                                    maxLength: 20
                                    type: string
                                phone:
                                    maxLength: 24
                                    type: string
                                postal_code:
                                    maxLength: 10
                                    type: string
                                reports_to:
                                    type: integer
                                state:
                                    maxLength: 40
                                    type: string
                                title:
                                    maxLength: 30
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/employee'
                                type: array
                    description: employee updated successfully
            summary: Update an existing employee by employee_id
    /employee/{id}:
        delete:
            parameters:
            -   description: Filter by employee_id
                in: query
                name: employee_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by last_name
                in: query
                name: last_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by first_name
                in: query
                name: first_name
                required: false
                schema:
                    pattern: '"^(({0,20})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,20}),|not-between::({0,20}),|in::(({0,20}),)*)$"'
                    type: string
            -   description: Filter by title
                in: query
                name: title
                required: false
                schema:
                    pattern: '"^(({0,30})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,30}),|not-between::({0,30}),|in::(({0,30}),)*)$"'
                    type: string
            -   description: Filter by reports_to
                in: query
                name: reports_to
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by birth_date
                in: query
                name: birth_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by hire_date
                in: query
                name: hire_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by address
                in: query
                name: address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by city
                in: query
                name: city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by state
                in: query
                name: state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by country
                in: query
                name: country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by postal_code
                in: query
                name: postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by phone
                in: query
                name: phone
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by fax
                in: query
                name: fax
                required: false
                schema:
                    pattern: '"^(({0,24})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,24}),|not-between::({0,24}),|in::(({0,24}),)*)$"'
                    type: string
            -   description: Filter by email
                in: query
                name: email
                required: false
                schema:
                    pattern: '"^(({0,60})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,60}),|not-between::({0,60}),|in::(({0,60}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/employee'
                                type: array
                    description: employee deleted successfully
            summary: Delete an existing employee by ID
        get:
            parameters:
            -   description: ID of the employee to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/employee'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve employee by employee_id
    /genre:
        get:
            parameters:
            -   description: Filter by genre_id
                in: query
                name: genre_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/genre'
                                type: array
                    description: A list of genre.
            summary: Retrieve all genre
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                genre_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required:
                            - genre_id
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/genre'
                                type: array
                    description: genre created successfully
            summary: Create a new genre
        put:
            parameters:
            -   description: Filter by genre_id
                in: query
                name: genre_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                genre_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/genre'
                                type: array
                    description: genre updated successfully
            summary: Update an existing genre by ID
    /genre/{genre_id}:
        put:
            parameters:
            -   description: ID of the genre to update
                in: path
                name: genre_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                genre_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/genre'
                                type: array
                    description: genre updated successfully
            summary: Update an existing genre by genre_id
    /genre/{id}:
        delete:
            parameters:
            -   description: Filter by genre_id
                in: query
                name: genre_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/genre'
                                type: array
                    description: genre deleted successfully
            summary: Delete an existing genre by ID
        get:
            parameters:
            -   description: ID of the genre to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/genre'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve genre by genre_id
    /invoice:
        get:
            parameters:
            -   description: Filter by invoice_id
                in: query
                name: invoice_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by customer_id
                in: query
                name: customer_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by invoice_date
                in: query
                name: invoice_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by billing_address
                in: query
                name: billing_address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by billing_city
                in: query
                name: billing_city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_state
                in: query
                name: billing_state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_country
                in: query
                name: billing_country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_postal_code
                in: query
                name: billing_postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by total
                in: query
                name: total
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            -   description: Filter by last_updated
                in: query
                name: last_updated
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice'
                                type: array
                    description: A list of invoice.
            summary: Retrieve all invoice
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                billing_address:
                                    maxLength: 70
                                    type: string
                                billing_city:
                                    maxLength: 40
                                    type: string
                                billing_country:
                                    maxLength: 40
                                    type: string
                                billing_postal_code:
                                    maxLength: 10
                                    type: string
                                billing_state:
                                    maxLength: 40
                                    type: string
                                customer:
                                    $ref: '#/components/schemas/customer'
                                customer_id:
                                    type: integer
                                invoice_date:
                                    format: date-time
                                    type: string
                                invoice_id:
                                    type: integer
                                last_updated:
                                    format: date-time
                                    type: string
                                line_items:
                                    items:
                                        $ref: '#/components/schemas/invoice_line'
                                    type: array
                                total:
                                    format: float
                                    type: number
                            required:
                            - invoice_id
                            - customer_id
                            - invoice_date
                            - total
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice'
                                type: array
                    description: invoice created successfully
            summary: Create a new invoice
        put:
            parameters:
            -   description: Filter by invoice_id
                in: query
                name: invoice_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by customer_id
                in: query
                name: customer_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by invoice_date
                in: query
                name: invoice_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by billing_address
                in: query
                name: billing_address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by billing_city
                in: query
                name: billing_city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_state
                in: query
                name: billing_state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_country
                in: query
                name: billing_country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_postal_code
                in: query
                name: billing_postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by total
                in: query
                name: total
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            -   description: Filter by last_updated
                in: query
                name: last_updated
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                billing_address:
                                    maxLength: 70
                                    type: string
                                billing_city:
                                    maxLength: 40
                                    type: string
                                billing_country:
                                    maxLength: 40
                                    type: string
                                billing_postal_code:
                                    maxLength: 10
                                    type: string
                                billing_state:
                                    maxLength: 40
                                    type: string
                                customer:
                                    $ref: '#/components/schemas/customer'
                                customer_id:
                                    type: integer
                                invoice_date:
                                    format: date-time
                                    type: string
                                invoice_id:
                                    type: integer
                                last_updated:
                                    format: date-time
                                    type: string
                                line_items:
                                    items:
                                        $ref: '#/components/schemas/invoice_line'
                                    type: array
                                total:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice'
                                type: array
                    description: invoice updated successfully
            summary: Update an existing invoice by ID
    /invoice/{id}:
        delete:
            parameters:
            -   description: Filter by invoice_id
                in: query
                name: invoice_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by customer_id
                in: query
                name: customer_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by invoice_date
                in: query
                name: invoice_date
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            -   description: Filter by billing_address
                in: query
                name: billing_address
                required: false
                schema:
                    pattern: '"^(({0,70})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,70}),|not-between::({0,70}),|in::(({0,70}),)*)$"'
                    type: string
            -   description: Filter by billing_city
                in: query
                name: billing_city
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_state
                in: query
                name: billing_state
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_country
                in: query
                name: billing_country
                required: false
                schema:
                    pattern: '"^(({0,40})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,40}),|not-between::({0,40}),|in::(({0,40}),)*)$"'
                    type: string
            -   description: Filter by billing_postal_code
                in: query
                name: billing_postal_code
                required: false
                schema:
                    pattern: '"^(({0,10})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,10}),|not-between::({0,10}),|in::(({0,10}),)*)$"'
                    type: string
            -   description: Filter by total
                in: query
                name: total
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            -   description: Filter by last_updated
                in: query
                name: last_updated
                required: false
                schema:
                    pattern: '"^((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})|lt::|le::|eq::|ne::|ge::|gt::|between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|not-between::(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),|in::((\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice'
                                type: array
                    description: invoice deleted successfully
            summary: Delete an existing invoice by ID
    /invoice/{invoice_id}:
        put:
            parameters:
            -   description: ID of the invoice to update
                in: path
                name: invoice_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                billing_address:
                                    maxLength: 70
                                    type: string
                                billing_city:
                                    maxLength: 40
                                    type: string
                                billing_country:
                                    maxLength: 40
                                    type: string
                                billing_postal_code:
                                    maxLength: 10
                                    type: string
                                billing_state:
                                    maxLength: 40
                                    type: string
                                customer:
                                    $ref: '#/components/schemas/customer'
                                customer_id:
                                    type: integer
                                invoice_date:
                                    format: date-time
                                    type: string
                                invoice_id:
                                    type: integer
                                last_updated:
                                    format: date-time
                                    type: string
                                line_items:
                                    items:
                                        $ref: '#/components/schemas/invoice_line'
                                    type: array
                                total:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice'
                                type: array
                    description: invoice updated successfully
            summary: Update an existing invoice by invoice_id
    /invoice/{invoice_id}/last_updated/{last_updated}:
        put:
            parameters:
            -   description: ID of the invoice to update
                in: path
                name: invoice_id
                required: true
                schema:
                    type: integer
            -   description: last_updated of the invoice to update
                in: path
                name: last_updated
                required: true
                schema:
                    type: date-time
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                billing_address:
                                    maxLength: 70
                                    type: string
                                billing_city:
                                    maxLength: 40
                                    type: string
                                billing_country:
                                    maxLength: 40
                                    type: string
                                billing_postal_code:
                                    maxLength: 10
                                    type: string
                                billing_state:
                                    maxLength: 40
                                    type: string
                                customer:
                                    $ref: '#/components/schemas/customer'
                                customer_id:
                                    type: integer
                                invoice_date:
                                    format: date-time
                                    type: string
                                invoice_id:
                                    type: integer
                                last_updated:
                                    format: date-time
                                    type: string
                                line_items:
                                    items:
                                        $ref: '#/components/schemas/invoice_line'
                                    type: array
                                total:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice'
                                type: array
                    description: invoice updated successfully
            summary: Update an existing invoice by ID
    /invoice_line:
        get:
            parameters:
            -   description: Filter by invoice_line_id
                in: query
                name: invoice_line_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by invoice_id
                in: query
                name: invoice_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by unit_price
                in: query
                name: unit_price
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            -   description: Filter by quantity
                in: query
                name: quantity
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice_line'
                                type: array
                    description: A list of invoice_line.
            summary: Retrieve all invoice_line
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                invoice_id:
                                    type: integer
                                invoice_line_id:
                                    type: integer
                                quantity:
                                    type: integer
                                track_id:
                                    type: integer
                                unit_price:
                                    format: float
                                    type: number
                            required:
                            - invoice_line_id
                            - invoice_id
                            - track_id
                            - unit_price
                            - quantity
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice_line'
                                type: array
                    description: invoice_line created successfully
            summary: Create a new invoice_line
        put:
            parameters:
            -   description: Filter by invoice_line_id
                in: query
                name: invoice_line_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by invoice_id
                in: query
                name: invoice_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by unit_price
                in: query
                name: unit_price
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            -   description: Filter by quantity
                in: query
                name: quantity
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                invoice_id:
                                    type: integer
                                invoice_line_id:
                                    type: integer
                                quantity:
                                    type: integer
                                track_id:
                                    type: integer
                                unit_price:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice_line'
                                type: array
                    description: invoice_line updated successfully
            summary: Update an existing invoice_line by ID
    /invoice_line/{id}:
        delete:
            parameters:
            -   description: Filter by invoice_line_id
                in: query
                name: invoice_line_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by invoice_id
                in: query
                name: invoice_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by unit_price
                in: query
                name: unit_price
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            -   description: Filter by quantity
                in: query
                name: quantity
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice_line'
                                type: array
                    description: invoice_line deleted successfully
            summary: Delete an existing invoice_line by ID
        get:
            parameters:
            -   description: ID of the invoice_line to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice_line'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve invoice_line by invoice_line_id
    /invoice_line/{invoice_line_id}:
        put:
            parameters:
            -   description: ID of the invoice_line to update
                in: path
                name: invoice_line_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                invoice_id:
                                    type: integer
                                invoice_line_id:
                                    type: integer
                                quantity:
                                    type: integer
                                track_id:
                                    type: integer
                                unit_price:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/invoice_line'
                                type: array
                    description: invoice_line updated successfully
            summary: Update an existing invoice_line by invoice_line_id
    /media_type:
        get:
            parameters:
            -   description: Filter by media_type_id
                in: query
                name: media_type_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/media_type'
                                type: array
                    description: A list of media_type.
            summary: Retrieve all media_type
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                media_type_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required:
                            - media_type_id
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/media_type'
                                type: array
                    description: media_type created successfully
            summary: Create a new media_type
        put:
            parameters:
            -   description: Filter by media_type_id
                in: query
                name: media_type_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                media_type_id:
                                    type: integer
                                name:
                                    maxLength: 120
                                    type: string
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/media_type'
                                type: array
                    description: media_type updated successfully
            summary: Update an existing media_type by ID
    /media_type/{id}:
        delete:
            parameters:
            -   description: Filter by media_type_id
                in: query
                name: media_type_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/media_type'
                                type: array
                    description: media_type deleted successfully
            summary: Delete an existing media_type by ID
    /playlist:
        get:
            parameters:
            -   description: Filter by playlist_id
                in: query
                name: playlist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist'
                                type: array
                    description: A list of playlist.
            summary: Retrieve all playlist
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    maxLength: 120
                                    type: string
                                playlist_id:
                                    type: integer
                            required:
                            - playlist_id
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist'
                                type: array
                    description: playlist created successfully
            summary: Create a new playlist
        put:
            parameters:
            -   description: Filter by playlist_id
                in: query
                name: playlist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    maxLength: 120
                                    type: string
                                playlist_id:
                                    type: integer
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist'
                                type: array
                    description: playlist updated successfully
            summary: Update an existing playlist by ID
    /playlist/{id}:
        delete:
            parameters:
            -   description: Filter by playlist_id
                in: query
                name: playlist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,120})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,120}),|not-between::({0,120}),|in::(({0,120}),)*)$"'
                    type: string
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist'
                                type: array
                    description: playlist deleted successfully
            summary: Delete an existing playlist by ID
        get:
            parameters:
            -   description: ID of the playlist to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve playlist by playlist_id
    /playlist/{playlist_id}:
        put:
            parameters:
            -   description: ID of the playlist to update
                in: path
                name: playlist_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                name:
                                    maxLength: 120
                                    type: string
                                playlist_id:
                                    type: integer
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist'
                                type: array
                    description: playlist updated successfully
            summary: Update an existing playlist by playlist_id
    /playlist_track:
        get:
            parameters:
            -   description: Filter by playlist_id
                in: query
                name: playlist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist_track'
                                type: array
                    description: A list of playlist_track.
            summary: Retrieve all playlist_track
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                playlist_id:
                                    type: integer
                                track_id:
                                    type: integer
                            required:
                            - playlist_id
                            - track_id
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist_track'
                                type: array
                    description: playlist_track created successfully
            summary: Create a new playlist_track
        put:
            parameters:
            -   description: Filter by playlist_id
                in: query
                name: playlist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                playlist_id:
                                    type: integer
                                track_id:
                                    type: integer
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist_track'
                                type: array
                    description: playlist_track updated successfully
            summary: Update an existing playlist_track by ID
    /playlist_track/{id}:
        delete:
            parameters:
            -   description: Filter by playlist_id
                in: query
                name: playlist_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/playlist_track'
                                type: array
                    description: playlist_track deleted successfully
            summary: Delete an existing playlist_track by ID
    /track:
        get:
            parameters:
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,200})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,200}),|not-between::({0,200}),|in::(({0,200}),)*)$"'
                    type: string
            -   description: Filter by album_id
                in: query
                name: album_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by media_type_id
                in: query
                name: media_type_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by genre_id
                in: query
                name: genre_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by composer
                in: query
                name: composer
                required: false
                schema:
                    pattern: '"^(({0,220})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,220}),|not-between::({0,220}),|in::(({0,220}),)*)$"'
                    type: string
            -   description: Filter by milliseconds
                in: query
                name: milliseconds
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by bytes
                in: query
                name: bytes
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by unit_price
                in: query
                name: unit_price
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/track'
                                type: array
                    description: A list of track.
            summary: Retrieve all track
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                album_id:
                                    type: integer
                                bytes:
                                    type: integer
                                composer:
                                    maxLength: 220
                                    type: string
                                genre_id:
                                    type: integer
                                media_type_id:
                                    type: integer
                                milliseconds:
                                    type: integer
                                name:
                                    maxLength: 200
                                    type: string
                                track_id:
                                    type: integer
                                unit_price:
                                    format: float
                                    type: number
                            required:
                            - track_id
                            - name
                            - media_type_id
                            - milliseconds
                            - unit_price
                            type: object
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/track'
                                type: array
                    description: track created successfully
            summary: Create a new track
        put:
            parameters:
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,200})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,200}),|not-between::({0,200}),|in::(({0,200}),)*)$"'
                    type: string
            -   description: Filter by album_id
                in: query
                name: album_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by media_type_id
                in: query
                name: media_type_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by genre_id
                in: query
                name: genre_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by composer
                in: query
                name: composer
                required: false
                schema:
                    pattern: '"^(({0,220})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,220}),|not-between::({0,220}),|in::(({0,220}),)*)$"'
                    type: string
            -   description: Filter by milliseconds
                in: query
                name: milliseconds
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by bytes
                in: query
                name: bytes
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by unit_price
                in: query
                name: unit_price
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                album_id:
                                    type: integer
                                bytes:
                                    type: integer
                                composer:
                                    maxLength: 220
                                    type: string
                                genre_id:
                                    type: integer
                                media_type_id:
                                    type: integer
                                milliseconds:
                                    type: integer
                                name:
                                    maxLength: 200
                                    type: string
                                track_id:
                                    type: integer
                                unit_price:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/track'
                                type: array
                    description: track updated successfully
            summary: Update an existing track by ID
    /track/{id}:
        delete:
            parameters:
            -   description: Filter by track_id
                in: query
                name: track_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by name
                in: query
                name: name
                required: false
                schema:
                    pattern: '"^(({0,200})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,200}),|not-between::({0,200}),|in::(({0,200}),)*)$"'
                    type: string
            -   description: Filter by album_id
                in: query
                name: album_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by media_type_id
                in: query
                name: media_type_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by genre_id
                in: query
                name: genre_id
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by composer
                in: query
                name: composer
                required: false
                schema:
                    pattern: '"^(({0,220})|lt::|le::|eq::|ne::|ge::|gt::|between::({0,220}),|not-between::({0,220}),|in::(({0,220}),)*)$"'
                    type: string
            -   description: Filter by milliseconds
                in: query
                name: milliseconds
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by bytes
                in: query
                name: bytes
                required: false
                schema:
                    pattern: '"^((\d+)|lt::|le::|eq::|ne::|ge::|gt::|between::(\d+),|not-between::(\d+),|in::((\d+),)*)$"'
                    type: integer
            -   description: Filter by unit_price
                in: query
                name: unit_price
                required: false
                schema:
                    pattern: '"^((.*)|lt::|le::|eq::|ne::|ge::|gt::|between::(.*),|not-between::(.*),|in::((.*),)*)$"'
                    type: number
            responses:
                '204':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/track'
                                type: array
                    description: track deleted successfully
            summary: Delete an existing track by ID
        get:
            parameters:
            -   description: ID of the track to get
                in: path
                name: id
                required: true
                schema:
                    type: string
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/track'
                                type: array
                    description: A list of schema objects.
            summary: Retrieve track by track_id
    /track/{track_id}:
        put:
            parameters:
            -   description: ID of the track to update
                in: path
                name: track_id
                required: true
                schema:
                    type: integer
            requestBody:
                content:
                    application/json:
                        schema:
                            properties:
                                album_id:
                                    type: integer
                                bytes:
                                    type: integer
                                composer:
                                    maxLength: 220
                                    type: string
                                genre_id:
                                    type: integer
                                media_type_id:
                                    type: integer
                                milliseconds:
                                    type: integer
                                name:
                                    maxLength: 200
                                    type: string
                                track_id:
                                    type: integer
                                unit_price:
                                    format: float
                                    type: number
                            required: []
                            type: object
                required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                items:
                                    $ref: '#/components/schemas/track'
                                type: array
                    description: track updated successfully
            summary: Update an existing track by track_id
    /{proxy+}:
        options:
            consumes:
            - application/json
            produces:
            - application/json
            responses:
                '200':
                    description: 200 response
                    headers:
                        Access-Control-Allow-Headers:
                            type: string
                        Access-Control-Allow-Methods:
                            type: string
                        Access-Control-Allow-Origin:
                            type: string
                    schema:
                        type: object
            x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                    application/json: '{"statusCode": 200}'
                responses:
                    default:
                        responseParameters:
                            method.response.header.Access-Control-Allow-Headers: '''Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'''
                            method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
                            method.response.header.Access-Control-Allow-Origin: '''*'''
                        responseTemplates:
                            application/json: ''
                        statusCode: 200
                type: mock
x-amazon-apigateway-cors:
    allowCredentials: true
    allowHeaders:
    - Origin
    - X-Requested-With
    - Content-Type
    - Accept
    - Authorization
    allowMethods:
    - GET
    - POST
    - OPTIONS
    - PUT
    - PATCH
    - DELETE
    allowOrigins:
    - '*'
