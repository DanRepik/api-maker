import hashlib
import os
import re

from api_maker.utils.logger import logger, DEBUG

log = logger(__name__)

def hash_folder(self, folder_path, include_regex=None, exclude_regex=None):
    folder_hash = hashlib.sha256()

    include_pattern = re.compile(include_regex) if include_regex else None
    exclude_pattern = re.compile(exclude_regex) if exclude_regex else None

    for root, dirs, files in os.walk(folder_path):
        for file in sorted(files):
            file_path = os.path.join(root, file)

            # Check if the file should be included based on the include regex
            if include_pattern and not include_pattern.match(file):
                continue
            
            # Check if the file should be excluded based on the exclude regex
            if exclude_pattern and exclude_pattern.match(file):
                continue
            
            with open(file_path, 'rb') as f:
                # Update the folder hash with the hash of the file contents
                file_hash = hashlib.sha256()
                file_hash.update(f.read())
                folder_hash.update(file_hash.digest())

    return folder_hash.hexdigest()



def write_hash(working_dir, hash_value: str):
    file_path = os.path.join(working_dir, '.hash')
    try:
        with open(file_path, 'w') as file:
            file.write(hash_value)
    
        if log.isEnabledFor(DEBUG):
            log.debug(f"Hash value written: {file_path}.")
    
    except Exception as e:
        log.warn(f"Error writing to {file_path}: {str(e)}")

def read_hash(working_dir) -> str:
    file_path = os.path.join(working_dir, '.hash')
    
    try:
        with open(file_path, 'r') as file:
            hash_value = file.read().strip()
        return hash_value
    except Exception as e:
        if log.isEnabledFor(DEBUG):
            log.info(f"Hash file not found: {file_path}")
    
        return None
